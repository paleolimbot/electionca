st_simplify(dTolerance = 100) %>%
leaflet::leaflet() %>%
leaflet::addPolygons()
boundaries %>%
st_simplify(dTolerance = 100) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addPolygons()
?st_simplify
boundaries %>%
st_simplify(dTolerance = 100, preserveTopology = TRUE) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addPolygons()
boundaries %>%
st_simplify(dTolerance = 100, preserveTopology = TRUE) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addPolygons(label = ~riding_label)
boundaries %>%
st_simplify(dTolerance = 100, preserveTopology = TRUE) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPolygons(label = ~riding_label)
boundaries %>%
st_simplify(dTolerance = 100) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPolygons(label = ~riding_label)
st_simplify(dTolerance = 100) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPolygons(label = ~riding_label)
boundaries %>%
filter(str_detect(geo_id, "^2015")) %>%
st_simplify(dTolerance = 100) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPolygons(label = ~riding_label)
boundaries %>%
filter(str_detect(geo_id, "^2003")) %>%
st_simplify(dTolerance = 100) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPolygons(label = ~riding_label)
boundaries %>%
filter(str_detect(geo_id, "^2003")) %>%
st_simplify(dTolerance = 100, preserveTopology = TRUE) %>%
st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPolygons(label = ~riding_label)
boundaries <- rbind(boundaries_2003, boundaries_2015) %>%
st_simplify(dTolerance = 100, preserveTopology = TRUE) %>%
st_transform(4326)
usethis::use_data(boundaries, overwrite = TRUE)
unlink("data-raw/boundaries_2015.zip")
unlink("data-raw/boundaries_2015/", recursive = TRUE)
unlink("data-raw/boundaries_2003.zip")
unlink("data-raw/boundaries_2003/", recursive = TRUE)
unlink("data-raw/results_2011.zip")
unlink("data-raw/results_2011/", recursive = TRUE)
source('~/Desktop/electionca/data-raw/results_ridings_boundaries.R', echo=TRUE)
library(sf)
library(lubridate)
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(electionca)
results
ridings
boundaries
results %>%
filter(year(election_date) == 2019)
source('~/Desktop/electionca/data-raw/results_ridings_boundaries.R', echo=TRUE)
related_ridings_mem(1391)
related_ridings_mem(1391)
library(tidyverse)
library(xml2)
library(sf)
related_ridings <- function(riding_id) {
url <- glue::glue("https://lop.parl.ca/ParlinfoWebApi/Organization/GetFullOrganization/{riding_id}")
message(url)
Sys.sleep(runif(1, min = 0.1, max = 0.5))
json <- jsonlite::read_json(url)
tibble(
related_riding_id = map_dbl(json$History, "OrganizationId"),
related_riding_is_future = map_lgl(json$History, "IsFuture")
)
}
related_ridings_mem <- memoise::memoise(
related_ridings,
cache = memoise::cache_filesystem("data-raw/memcache")
)
related_ridings_mem(1391)
library(tidyverse)
library(xml2)
library(sf)
related_ridings <- function(riding_id) {
url <- glue::glue("https://lop.parl.ca/ParlinfoWebApi/Organization/GetFullOrganization/{riding_id}")
message(url)
Sys.sleep(runif(1, min = 0.1, max = 0.5))
json <- jsonlite::read_json(url)
tibble(
related_riding_id = map_dbl(json$History, "OrganizationId"),
related_riding_is_future = map_lgl(json$History, "IsFuture")
)
}
related_ridings_mem <- memoise::memoise(
related_ridings,
cache = memoise::cache_filesystem("data-raw/memcache")
)
related_ridings_mem(1391)
source('~/Desktop/electionca/data-raw/results_ridings_boundaries.R', echo=TRUE)
results
range(results$election_date)
results %>% filter(lubridate::year(electio_date) == 2019)
results %>% filter(lubridate::year(election_date) == 2019)
ridings
boundaries
boundaries %>%
semi_join(ridings)
boundaries %>%
select(boundary_id, geometry) %>%
semi_join(ridings)
boundaries <- boundaries %>%
select(boundary_id, geometry) %>%
semi_join(ridings)
boundaries <- boundaries %>%
select(boundary_id, geometry) %>%
semi_join(ridings, by = "boundary_id")
usethis::use_data(results, overwrite = TRUE)
usethis::use_data(ridings, overwrite = TRUE)
usethis::use_data(boundaries, overwrite = TRUE)
use_test()
joined <- dplyr::left_join(results, ridings, by = "riding")
joined
expect_true(all(!is.na(riding_label)))
all(!is.na(joined$riding_label))
ridings %>% filter(is.na(lon))
ridings %>% filter(is.na(riding_label))
joined
joined %>% filter(is.na(riding_label))
joined %>% filter(is.na(riding_label)) %>% View()
lop_candidates %>% filter(ElectionCanadaLastName ==  "Marthe Lépine")
lop_candidates %>% filter(ElectionCanadaLastName ==  "Lépine")
lop_candidates %>% filter(ElectionCanadaLastName ==  "Lépine", party == "Green Party of Canada")
lop_candidates %>% filter(ElectionCanadaLastName ==  "Lépine", PartyNameEn == "Green Party of Canada")
lop_candidates %>% filter(ElectionCanadaLastName ==  "Lépine", PartyNameEn == "Green Party of Canada") %>% View()
View(ridings)
lop_candidates <- candidates_xml %>%
xml_children() %>%
map_dfr(read_candidate_node) %>%
# filter to the candiates we're going to consider, since this limits the ridings
# we have to consider as well
filter(IsGeneral == "true") %>%
# make sure the riding_id is set so that we can semi_join() to filter
# ridings
mutate(riding_id = as.numeric(ConstituencyId)) %>%
# one candidate has no riding_id...fixing here
mutate(
riding_id = if_else(
ElectionCanadaLastName ==  "Lépine", PartyNameEn == "Green Party of Canada",
3264,
riding_id
)
)
lop_candidates <- candidates_xml %>%
xml_children() %>%
map_dfr(read_candidate_node) %>%
# filter to the candiates we're going to consider, since this limits the ridings
# we have to consider as well
filter(IsGeneral == "true") %>%
# make sure the riding_id is set so that we can semi_join() to filter
# ridings
mutate(riding_id = as.numeric(ConstituencyId)) %>%
# one candidate has no riding_id...fixing here
mutate(
riding_id = if_else(
ElectionCanadaLastName == "Lépine" & PartyNameEn == "Green Party of Canada",
3264,
riding_id
)
)
# best ridings info
# https://lop.parl.ca/sites/ParlInfo/default/en_CA/ElectionsRidings/Ridings
# raw data at
# https://lop.parl.ca/ParlinfoWebApi/Organization/GetConstituencyList/1
# single riding info
# https://lop.parl.ca/ParlinfoWebApi/Organization/GetFullOrganization/674
#
download_cache(
"https://lop.parl.ca/ParlinfoWebApi/Organization/GetConstituencyList/1",
"data-raw/lop_ridings.json"
)
related_ridings <- function(riding_id) {
url <- glue::glue("https://lop.parl.ca/ParlinfoWebApi/Organization/GetFullOrganization/{riding_id}")
message(url)
Sys.sleep(runif(1, min = 0.1, max = 0.5))
json <- jsonlite::read_json(url)
tibble(
related_riding_id = map_dbl(json$History, "OrganizationId"),
related_riding_is_future = map_lgl(json$History, "IsFuture")
)
}
related_ridings_mem <- memoise::memoise(
related_ridings,
cache = memoise::cache_filesystem("data-raw/memcache")
)
lop_ridings_json <- jsonlite::read_json("data-raw/lop_ridings.json")
lop_ridings <- tibble(
riding_label = map_chr(lop_ridings_json, "LongEn"),
riding = sanitize_riding(riding_label),
province = map_chr(lop_ridings_json, c("Constituency", "ProvinceEn")),
notes = map_chr(lop_ridings_json, c("Constituency", "HFERNotesEn")),
riding_id = map_dbl(lop_ridings_json, "OrganizationId")
) %>%
# only consider ridings for which there is a candidate
semi_join(lop_candidates, by = "riding_id") %>%
extract(notes, c("year_start", "year_end"), "\\(\\s*([0-9]{4})\\s*-\\s*([0-9]{4})?\\s*\\)") %>%
mutate(
year_start = as.numeric(year_start),
year_end = as.numeric(year_end)
) %>%
mutate(
# errors that cause problems...Kitchener--Conestoga was probably
# a 2004 riding rather than a 2005 one, and Dauphin--Swan River
# ends in 2004
year_start = if_else(riding %in% c("kitchener--conestoga", "westlock--st_paul"), 2004, year_start),
year_end = if_else(riding %in% c("dauphin--swan_river", "toronto_centre--rosedale"), 2004, year_end)
) %>%
arrange(province, year_start, riding)
lop_riding_relations <- lop_ridings %>%
select(riding_id) %>%
mutate(relations = map(riding_id, related_ridings_mem)) %>%
unnest(relations)
download_cache(
"http://ftp.maps.canada.ca/pub/elections_elections/Electoral-districts_Circonscription-electorale/federal_electoral_districts_boundaries_2003/federal_electoral_districts_boundaries_2003_en.gdb.zip",
"data-raw/boundaries_2003.zip"
)
unzip_cache("data-raw/boundaries_2003.zip", exdir = "data-raw/boundaries_2003")
boundaries_2003_raw <- read_sf("data-raw/boundaries_2003/federal_electoral_districts_boundaries_2003_en.gdb/")
# electoral districts, 2013
# https://open.canada.ca/data/en/dataset/10801c67-7f18-4ea1-bda7-8962abfc5578
# GDB: http://ftp.maps.canada.ca/pub/elections_elections/Electoral-districts_Circonscription-electorale/federal_electoral_districts_boundaries_2013/federal_electoral_districts_boundaries_2013_en.gdb.zip
download_cache(
"http://ftp.maps.canada.ca/pub/elections_elections/Electoral-districts_Circonscription-electorale/federal_electoral_districts_boundaries_2013/federal_electoral_districts_boundaries_2013_en.gdb.zip",
"data-raw/boundaries_2013.zip"
)
unzip_cache("data-raw/boundaries_2013.zip", exdir = "data-raw/boundaries_2013")
boundaries_2013_raw <- read_sf("data-raw/boundaries_2013/federal_electoral_districts_boundaries_2013_en.gdb/")
# electoral districts, 2015
# https://open.canada.ca/data/en/dataset/737be5ea-27cf-48a3-91d6-e835f11834b0
# SHP: http://ftp.maps.canada.ca/pub/elections_elections/Electoral-districts_Circonscription-electorale/federal_electoral_districts_boundaries_2015/federal_electoral_districts_boundaries_2015_shp_en.zip
download_cache(
"http://ftp.maps.canada.ca/pub/elections_elections/Electoral-districts_Circonscription-electorale/federal_electoral_districts_boundaries_2015/federal_electoral_districts_boundaries_2015_shp_en.zip",
"data-raw/boundaries_2015.zip"
)
unzip_cache("data-raw/boundaries_2015.zip", exdir = "data-raw/boundaries_2015")
boundaries_2015_raw <- read_sf("data-raw/boundaries_2015/FED_CA_2_2_ENG.shp")
boundaries_2003_2013 <- rbind(
boundaries_2003_raw %>% mutate(year_start = 2004),
boundaries_2013_raw %>% mutate(year_start = 2013)
) %>%
st_transform(3979) %>%
select(year_start, province_code = provcode, riding_label = name) %>%
left_join(provinces, by = "province_code") %>%
mutate(
riding_label = riding_label %>%
# two typos
str_replace_all("¿", "--") %>%
str_replace("Vaudreuil-Soulanges", "Vaudreuil--Soulanges") %>%
str_replace("Northwest Territories", "Western Arctic"),
riding = sanitize_riding(riding_label)
) %>%
rename(geometry = Shape) %>%
select(province, riding, year_start, geometry)
boundaries_2015 <- boundaries_2015_raw %>%
st_transform(3979) %>%
select(province_code = PROVCODE, riding_label = ENNAME) %>%
left_join(provinces, by = "province_code") %>%
mutate(riding = sanitize_riding(riding_label), year_start = 2015) %>%
select(province, riding, year_start, geometry)
boundaries <- rbind(boundaries_2003_2013, boundaries_2015) %>%
st_simplify(dTolerance = 100, preserveTopology = TRUE) %>%
# this makes sure there is exactly one multipolygon for each  riding
group_by(province, riding, year_start) %>%
summarise() %>%
ungroup() %>%
mutate(boundary_id = 1:n())
boundaries_summary <- boundaries %>%
st_centroid() %>%
st_transform(4326) %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry(NULL) %>%
rename(lon = X, lat = Y)
# these ridings are unrelated to other ridings or only have associations within themselves
ridings_geo_manual <- tibble::tribble(
~riding,               ~province, ~riding_id, ~lat, ~lon,
"alberta_provisional_district", "Northwest Territories",        459,    52.202380, -113.620941,
"assiniboia_east", "Northwest Territories",        666,    51.130294, -102.910833,
"assiniboia_west", "Northwest Territories",        668,    51.027296, -108.794806,
"saskatchewan_provisional_district", "Northwest Territories",       7650,    51.568571, -105.721331,
"cape_breton--the_sydneys",           "Nova Scotia",       1700,    46.207857, -60.670202,
"bellechasse",                "Quebec",        913,    46.688108, -70.734611,
"bonaventure",                "Quebec",       1071,    48.123075, -65.431589,
"gaspe",                "Quebec",       3206,    48.841555, -64.517820,
"kamouraska",                "Quebec",       4083,    47.565160, -69.867798,
"lislet",                "Quebec",       4314,    47.102894, -70.356807,
"montmagny",                "Quebec",       5441,    46.949393, -70.542881 ,
"rimouski",                "Quebec",       7255,    48.445941, -68.508984,
"temiscouata",                "Quebec",       9143,    47.575505, -68.859313,
"montmagny--lislet",                "Quebec",       5446,    0,    0,
"iles-de-la-madeleine",                "Quebec",       3825,    47.368700, -61.916021,
"riviere-du-loup--temiscouata",                "Quebec",       7284,    47.766289, -69.312980,
"temiscouata",                "Quebec",       9144,    47.575505, -68.859313,
"bonaventure--iles-de-la-madeleine",                "Quebec",       1075,    0,    0,
"riviere-du-loup--temiscouata",                "Quebec",       7285,    47.766289, -69.312980,
"kamouraska--riviere-du-loup",                "Quebec",       4086,    0,    0,
"rimouski--temiscouata",                "Quebec",       7261,    0,    0,
"gatineau--la_lievre",                "Quebec",       3218,    45.533681, -75.712866
) %>%
filter(lat != 0) %>%
select(riding_id, lon, lat)
ridings_geo <- lop_ridings %>%
filter(is.na(year_end) | year_end > 2004) %>%
mutate(year_start_join = pmax(2004, year_start)) %>%
left_join(
boundaries_summary,
by =  c("province", "riding", "year_start_join" = "year_start")
) %>%
filter(is.finite(lon), is.finite(lat)) %>%
select(riding_id, boundary_id, lon, lat) %>%
mutate(loc_iter = 0) %>%
bind_rows(ridings_geo_manual)
# takes 8 iterations
for (i in 1:10) {
ridings_geo_new <- lop_ridings %>%
select(riding_id) %>%
anti_join(ridings_geo, by =  "riding_id") %>%
left_join(lop_riding_relations, by = "riding_id") %>%
inner_join(ridings_geo, by = c("related_riding_id" = "riding_id")) %>%
group_by(riding_id) %>%
summarise(lon = mean(lon), lat = mean(lat), loc_iter = i)
if (nrow(ridings_geo_new) == 0) {
break
}
ridings_geo <- bind_rows(ridings_geo, ridings_geo_new)
}
# not perfect, but pretty good! could get better by
# looking at some of the ridings that take 4+ iterations to
# resolve
ridings <- lop_ridings %>%
left_join(ridings_geo, by = "riding_id") %>%
# ditch the "riding_id" for a more human readable unique identifier
left_join(provinces, by = "province") %>%
mutate(riding_maybe_not_unique = paste(province_code, year_start, riding, sep = "/")) %>%
group_by(riding_maybe_not_unique) %>%
mutate(riding = if_else(
rep(n(), n()) == 1,
riding_maybe_not_unique,
str_replace(riding_maybe_not_unique, "[0-9]{4}", paste0("\\0", letters[1:n()])))
) %>%
ungroup() %>%
select(riding, riding_label, year_start, year_end, riding_id, province, boundary_id, lon, lat)
results <- lop_candidates %>%
transmute(
election_date = lubridate::ymd_hms(ElectionDate) %>% as.Date(),
name = paste(ElectionCanadaFirstName, ElectionCanadaMiddleName, ElectionCanadaLastName) %>%
str_replace(" NA ", " "),
party = PartyNameEn,
riding_id,
votes = as.numeric(Votes),
result = ResultLongEn,
person_id = as.numeric(PersonId) %>% na_if(0)
) %>%
left_join(ridings %>% select(riding_id, riding), by = "riding_id") %>%
select(election_date, riding, name, party, votes, result, person_id) %>%
arrange(election_date, riding, desc(votes))
boundaries <- boundaries %>%
select(boundary_id, geometry) %>%
semi_join(ridings, by = "boundary_id")
usethis::use_data(results, overwrite = TRUE)
usethis::use_data(ridings, overwrite = TRUE)
usethis::use_data(boundaries, overwrite = TRUE)
semi_join(results, ridings)
ridings
results
identical(semi_join(results, ridings), results)
identical(semi_join(ridings, results, by = "riding"), ridings)
all(is.finite(ridings$lon))
all(is.finite(ridings$lat))
expect_identical(dplyr::semi_join(boundaries, ridings, by = "boundary_id"), boundaries)
identical(dplyr::semi_join(boundaries, ridings, by = "boundary_id"), boundaries)
all(boundaries$boundary_id %in% ridings$boundary_id)
all(ridings$boundary_id %in% boundaries$boundary_id)
all(ridings$boundary_id %in% boundaries$boundary_id, na.rm = TRUE)
ridings[!(ridings$boundary_id %in% boundaries$boundary_id), ]
expect_true(all(ridings$boundary_id %in% c(boundaries$boundary_id, NA))
})
all(ridings$boundary_id %in% c(boundaries$boundary_id, NA))
results %>%
filter(year(election_date) == 2019)
library(lubridate)
results %>%
filter(year(election_date) == 2019)
dplyr::n_distinct(results$election_date)
unlink("data-raw/boundaries_2015.zip")
unlink("data-raw/boundaries_2015/", recursive = TRUE)
unlink("data-raw/boundaries_2003.zip")
unlink("data-raw/boundaries_2003/", recursive = TRUE)
unlink("data-raw/boundaries_2013.zip")
unlink("data-raw/boundaries_2013/", recursive = TRUE)
unlink("data-raw/lop_ridings.json")
unlink("data-raw/candidates.xml")
lubridate::year(range(results$election_date))
use_package("dplyr", "Suggests")
use_package("lubridate", "Suggests")
library(electionca)
library(electionca)
results
ridings
boundaries
library(tidyverse)
library(lubridate)
results %>%
filter(year(election_date) == 2019)
results %>%
filter(year(election_date) == 2019) %>%
left_join(ridings) %>%
left_join(boundaries)
results %>%
filter(year(election_date) == 2019) %>%
left_join(ridings) %>%
left_join(boundaries) %>%
ggplot(aes(fill = party))  +
geom_sf()
results %>%
filter(year(election_date) == 2019) %>%
left_join(ridings) %>%
left_join(boundaries)
results %>%
filter(year(election_date) == 2019) %>%
left_join(ridings) %>%
left_join(boundaries) %>%
st_as_sf() %>%
ggplot(aes(fill = party))  +
geom_sf()
results %>%
filter(year(election_date) == 2019) %>%
left_join(ridings) %>%
left_join(boundaries) %>%
sf::st_as_sf() %>%
ggplot(aes(fill = party))  +
geom_sf()
results %>%
filter(year(election_date) == 2019, results == "Elected") %>%
left_join(ridings) %>%
left_join(boundaries) %>%
sf::st_as_sf() %>%
ggplot(aes(fill = party))  +
geom_sf()
results %>%
filter(year(election_date) == 2019, result == "Elected") %>%
left_join(ridings) %>%
left_join(boundaries) %>%
sf::st_as_sf() %>%
ggplot(aes(fill = party))  +
geom_sf()
results %>%
filter(year(election_date) == 2019, result == "Elected") %>%
left_join(ridings) %>%
left_join(boundaries) %>%
sf::st_as_sf() %>%
ggplot(aes(fill = party))  +
geom_sf() +
theme_void()
results %>%
filter(year(election_date) == 2015, result == "Elected") %>%
left_join(ridings) %>%
left_join(boundaries) %>%
ggplot(aes(fill = party, geometry = geometry))  +
geom_sf() +
theme_void()
library(tidyverse)
library(lubridate)
results %>%
filter(year(election_date) == 2019, result == "Elected") %>%
left_join(ridings) %>%
left_join(boundaries) %>%
ggplot(aes(fill = party, geometry = geometry))  +
geom_sf() +
theme_void()
library(tidyverse)
library(lubridate)
results %>%
filter(year(election_date) == 2019, result == "Elected") %>%
left_join(ridings, by = "riding") %>%
left_join(boundaries, by = "boundary_id") %>%
ggplot(aes(fill = party, geometry = geometry))  +
geom_sf() +
theme_void()
use_lifecycle_badge("experimental")
